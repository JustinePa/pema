#!/usr/bin/env bds

# This is P.E.M.A!  A metabarcoding pipenline for environmental DNA samples.
# Author: Haris Zafeiropoulos 
# date: 2017-2018
# This script is meant for the Singularity image version of P.E.M.A.

include "modules/initialize"
include "modules/preprocess"
include "modules/clustering"
include "modules/taxAssignment"
include "modules/postAssignment"
include "modules/phyloseq"


# Read parameters file for the first time! 
string parameterFilePath = "/mnt/analysis/"
parameterFilePath.chdir()
string f = "parameters.tsv"                           
string{} paramsFirstAssignment =  readParameterFile(f)


###############################################################
#                 0. Initialize analysis                      #
###############################################################
string{} globalVars = initializeAnalysis(paramsFirstAssignment)
wait

# IMPORTANT! Module to train classifiers is enabled through this statement
if ( paramsFirstAssignment{'custom_ref_db'} == 'Yes' ){
   
   string{} initGlobalVars = globalVars
   wait
   string{} globalVars = trainClassifier(paramsFirstAssignment, initGlobalVars)
   
}
wait

###############################################################
#                   1. Quality Control                        #
###############################################################

qualityControl(paramsFirstAssignment, globalVars)
wait
################################################################
#                   2. Trimming                                #
################################################################

parameterFilePath.chdir()
string g = "parameters.tsv"
string{} paramsTrimmoStep =  readParameterFile(g)

globalVars{'dataPath'}.chdir()

# If ITS as marker gene, remove length variablity with cutadat
if ( paramsTrimmoStep{'gene'} == 'gene_ITS' ){
   cutadaptForIts(paramsTrimmoStep, globalVars)
}

# Trim fastq files using Trimmomatic
trimSeqs(paramsTrimmoStep, globalVars)
wait


################################################################
#              3. Sequence adjustment                          #
################################################################
parameterFilePath.chdir()
string h = "parameters.tsv"
string{} paramsBayesHammerStep =  readParameterFile(h)
 
adjustSeqs(paramsBayesHammerStep, globalVars)
wait


################################################################
#          4. Merging the paired-end samples                   #
################################################################

parameterFilePath.chdir()
string i = "parameters.tsv"
string{} paramsSpadesMerging = readParameterFile(i)

merging(paramsSpadesMerging, globalVars)
wait


################################################################
#          5. Dereplicate sequence samples                     #
################################################################

################################################################
#      Build subdirectories according to the params file       #
################################################################

buildDirectories(paramsSpadesMerging, globalVars)

parameterFilePath.chdir()
string j = "parameters.tsv"
string{} paramsDereplication =  readParameterFile(j)
wait

if ( paramsDereplication{'clusteringAlgo'} == 'algo_Swarm' ) {

   println('Pema is at the dereplication step; this may take a while.')
   swarmDereplicate(paramsDereplication, globalVars)
   wait


} else {

   globalVars = obiDereplicate(paramsDereplication, globalVars)

   wait

   mergeFilesNonSwarm(paramsDereplication, globalVars)

   wait

}


string clustering = globalVars{'outputPoint'} + "/clustering.chp"
checkpoint clustering

################################################################
#           6. OTUs clustering / ASVs inference                #
################################################################
 
parameterFilePath.chdir()
string k = "parameters.tsv"
string{} paramsOfTable =  readParameterFile(k)

if ( paramsDereplication{'clusteringAlgo'} == 'algo_vsearch' ) {

   clusteringVsearch(paramsOfTable, globalVars)

} else if (paramsDereplication{'clusteringAlgo'} == 'algo_Swarm') {

   clusteringSwarm(paramsOfTable, globalVars)

}

println("The OTUs clustering / ASVs inference step has been completed.")
string taxAssign = globalVars{'outputPoint'} + "/taxAssign.chp"
checkpoint taxAssign

################################################################
#                7. Taxonomic assignment                       #
################################################################

parameterFilePath.chdir()
string l = "parameters.tsv"
string{} paramsForTaxAssign =  readParameterFile(l)

if ( paramsForTaxAssign{'custom_ref_db'} != 'Yes'){

   if ( paramsForTaxAssign{'gene'} == 'gene_16S') {

      if (paramsForTaxAssign{'classifierAlgo'} == 'RDPClassifier') {

         println('Pema cannot use RDPClassifier for your marker gene. It will use CREST instead and the relative parameter will change accordingly.')
         
         globalVars{'classifierAlgo'}         = 'CREST'
         paramsForTaxAssign{'classifierAlgo'} = 'CREST'
         wait

      }

      if (paramsForTaxAssign{'taxonomyAssignmentMethod'} != 'phylogeny') {

         crestAssign(paramsForTaxAssign, globalVars)
         wait
         println("Alignment based taxonomy assignment using the CREST classifier has been completed.")

      } else {
   
            phylogenyAssign(paramsForTaxAssign, globalVars)
            wait
            println("Phylogeny based taxonomy assignment has been completed.")

      }

   } else if ( paramsForTaxAssign{'gene'} == 'gene_COI' ) {

      if ( paramsForTaxAssign{'classifierAlgo'} == 'CREST' ) {

         println('Pema cannot run COI data using the CREST classifier. It will use RDPClassifer instead and the relative parameter will change accordingly.')

         globalVars{'classifierAlgo'}         = 'RDPClassifier'
         paramsForTaxAssign{'classifierAlgo'} = 'RDPClassifier'

         wait

      }
      
      if (paramsForTaxAssign{'classifierAlgo'} == 'RDPClassifier') {

         rdpAssign(paramsForTaxAssign, globalVars)
         wait
         println("Alignment based taxonomy assignment using the RDPClassifier has been completed.")

      }

   } else if (paramsForTaxAssign{'gene'} == 'gene_18S') {

      if ( paramsForTaxAssign{'classifierAlgo'} == 'RDPClassifier' ) {

         println('Pema cannot use RDPClassifier for your marker gene. It will use CREST instead and the relative parameter will change accordingly.')

         globalVars{'classifierAlgo'}         = 'CREST'
         paramsForTaxAssign{'classifierAlgo'} = 'CREST'
         wait

      }
      
      if ( paramsForTaxAssign{'classifierAlgo'} == 'CREST' ) {
 
         crestAssign(paramsForTaxAssign, globalVars)
         wait
         println("Alignment based taxonomy assignment using the CREST classifier has been completed.")

      }

   } else if (paramsForTaxAssign{'gene'} == 'gene_ITS') {

      if ( paramsForTaxAssign{'classifierAlgo'} == 'RDPClassifier' ) {

         println('Pema cannot use RDPClassifier for your marker gene. It will use CREST instead and the relative parameter will change accordingly.')

         globalVars{'classifierAlgo'}         = 'CREST'
         paramsForTaxAssign{'classifierAlgo'} = 'CREST'
         wait
      } 
      
      if ( paramsForTaxAssign{'classifierAlgo'} == 'CREST' ) {
 
         crestAssign(paramsForTaxAssign, globalVars)
         wait
         println("Alignment based taxonomy assignment using the CREST classifier has been completed.")

      }

   } else if ( paramsForTaxAssign{'gene'} == 'gene_12S' ) {

      if ( paramsForTaxAssign{'classifierAlgo'} == 'CREST' ) {

         println('Pema cannot run COI data using the CREST classifier. It will use RDPClassifer instead and the relative parameter will change accordingly.')

         globalVars{'classifierAlgo'}         = 'RDPClassifier'
         paramsForTaxAssign{'classifierAlgo'} = 'RDPClassifier'

         wait

      }
      
      if (paramsForTaxAssign{'classifierAlgo'} == 'RDPClassifier') {

         rdpAssign(paramsForTaxAssign, globalVars)
         wait
         println("Alignment based taxonomy assignment using the RDPClassifier has been completed.")

      }
   }

} else if ( paramsForTaxAssign{'custom_ref_db'} == 'Yes') {

   if ( paramsForTaxAssign{'classifierAlgo'} == 'RDPClassifier' ) {

      rdpAssign(paramsForTaxAssign, globalVars)

   } else if ( paramsForTaxAssign{'classifierAlgo'} == 'CREST' ) {

      crestAssign(paramsForTaxAssign, globalVars)

   } else {

      println('The classifier you chose is not available in the Pema framework.')
   }

}
println("The taxonomy assignment step has been completed.")

# Check for running the ncbi-taxonomist tool
if ( paramsForTaxAssign{'getNCBITaxId'} == 'Yes'){

    ncbiTaxonomyMapping(paramsForTaxAssign, globalVars)

    println("The assignments on the finalTable.tsv file have been linked to NCBI Taxonomy ids.")
}

string communAnal = globalVars{'outputPoint'} + "/communAnal.chp"
checkpoint communAnal

################################################################
#                8. Biodiversity analysis                      #
################################################################

parameterFilePath.chdir()
string ca = "parameters.tsv"
string{} paramsForCA =  readParameterFile(ca)


if ( paramsForCA{'phyloseq'} == 'Yes') {

   communityAnalysis(paramsForCA, globalVars)

}

wait

################################################################
#                Pema has been concluded                      #
################################################################

###  Make a file where i will move all the checkpoints
parameterFilePath.chdir() ;

perSampleGeneral(paramsForCA, globalVars)
wait
if ( globalVars{'classifierAlgo'} == 'CREST') {
    CrestPerSample(paramsForCA, globalVars)
} else if ( globalVars{'classifierAlgo'} == 'RDPClassifier') {
    RDPClassifierPerSample(paramsForCA, globalVars)
}
wait

if ( paramsForCA{'emptyCheckpoints'} == 'Yes' ) {
   string checkpointsDir = 'checkpoints_for_' + paramsForCA{'outputFolderName'}
   globalVars{'outputFilePath'}.chdir()
   checkpointsDir.mkdir()
   globalVars{'outputPoint'}.chdir()   
   sys mv *.chp $globalVars{'outputFilePath'}/$checkpointsDir
}
wait

if ( paramsForCA{'gene'} == 'gene_ITS' ) {

    globalVars{'dataPath'}.chdir()
    
    sys mkdir cutadapt 
    sys mv *fastq.gz data_after_cutadapt/
    sys data_after_cutadapt/ ..

    sys mv ../initialData/* .
    sys rmdir ../initialData

}
println('----------------------------------------------------------')
println('Pema has been completed successfully. Let biology start!')
println('Thanks for using Pema.')


   


